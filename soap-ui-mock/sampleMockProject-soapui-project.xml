<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e0471973-b6cb-4beb-a8bb-d0f6f5c1e30b" activeEnvironment="Default" name="sampleMockProject" resourceRoot="${projectDir}" soapui-version="5.4.0-EB" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="34bee7d3-dc63-4feb-afd3-dfef93ddcbae" port="8080" path="/" host="VMWARE-WINDOWS7-DEV" name="StudentService"><con:settings/><con:properties/><con:restMockAction name="/student" method="GET" resourcePath="/student" id="b8274b58-a586-4d48-86b1-b58fdd1a8de2"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="allStudent" id="462b1da6-a6a0-459a-a8c4-92da8b32fa6f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"students": {
		"student":[{
			"id" : 1,
			"name" : "john",
			"cource" : "java"
		}, {
			"id" : 2,
			"name" : "rodrigo",
			"cource" : "php"		
		
		}, {
			"id" : 3,
			"name" : "marcia",
			"cource" : "vb"
		}]
	}	
}</con:responseContent><con:header><con:name>status</con:name><con:value>all</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/student/1" method="GET" resourcePath="/student/1" id="5f786bea-dfd8-44ca-9ddb-5b08bebd2c94"><con:settings/><con:defaultResponse>singleStudent</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="singleStudent" id="8f805301-0d71-449e-bf49-91055c5e5a2a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"student":{
		"id" : 1,
		"name" : "john",
		"cource" : "java"
	}
}</con:responseContent><con:header><con:name>status</con:name><con:value>single</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/students" method="GET" resourcePath="/students" id="6b5eb2f8-a7c3-49ac-9838-66b7d0d84769"><con:settings/><con:defaultResponse>400</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="400" id="6e95c495-f65b-4ccc-8193-7ab848c04dab" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>